[ftplugin]
lua = '''
nmap <buffer> <Leader>r <Plug>(Luadev-RunLine)
vmap <buffer> <Leader>r <Plug>(Luadev-Run)
nmap <buffer> K <Plug>(Luadev-RunWord)
'''

help = '''
nnoremap <buffer> <CR> <C-]>
nnoremap <buffer> <BS> <C-T>
nnoremap <buffer> q :quit<CR>

if has('vertsplit')
    let s:ratio = &co / str2float(&lines)
    let s:display_landscape = s:ratio > 2.74
    if s:display_landscape
        wincmd L
    endif
endif
'''

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
lazy = 1
on_cmd = 'DeinUpdate'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:vim_markdown_strikethrough = 1
'''

[[plugins]]
repo = '2072/PHP-Indenting-for-VIm'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let NERDTreeIgnore=['\~$', '\.lo$', '\.la$', '\.pyc']
    let NERDTreeMinimalUI=1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'Yggdroot/LeaderF'
hook_post_update = ':LeaderfInstallCExtension'
hook_add = '''
    nnoremap <unique><silent> <Leader>F :<C-U>LeaderfSelf<CR>
    if executable('universal-ctags')
        let g:Lf_Ctags = 'universal-ctags'
    elseif executable('uctags')
        let g:Lf_Ctags = 'uctags'
    endif
    let g:Lf_PreviewInPopup = 1
    let g:Lf_WindowPosition = 'popup'
    let g:Lf_ShowDevIcons = 0
    nmap <silent><Leader>F :<C-U>LeaderfSelf<CR>
'''
on_map = {n = ['<Leader>f', '<Leader>b']}

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_enabled=0
'''

[[plugins]]
repo = 'alvan/vim-php-manual'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'jeffkreeftmeijer/vim-numbertoggle'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = 'executable("ctags") || executable("universal-ctags")'
hook_add = '''
    if executable('universal-ctags')
        let g:gutentags_ctags_executable = 'universal-ctags'
    endif
    set tags=./.tags;,.tags
    let g:gutentags_ctags_tagfile='.ctags'
    let s:vim_tags = expand('~/.cache/tags')
    let g:gutentags_cache_dir = s:vim_tags
    set statusline+=%{gutentags#statusline()}
    let g:gutentags_exclude_filetypes = ['gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail', 'git']
'''

[[plugins]]
repo = 'vim-vdebug/vdebug'
hook_add = '''
    let g:vdebug_options = {
    \ 'port': 9003,
    \ 'ide_key': 'gasolwu',
    \ 'proxy_host': '',
    \ 'proxy_port': 0,
    \ }
'''

[[plugins]]
repo = 'haginaga/vim-compiler-phpunit'

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
    let test#strategy = {
        \ 'nearest': 'neovim',
        \ 'file':    'dispatch',
        \ 'suite':   'dispatch',
    \}
    nmap <silent> t<C-n> :TestNearest<CR>
    nmap <silent> t<C-f> :TestFile<CR>
    nmap <silent> t<C-s> :TestSuite<CR>
    nmap <silent> t<C-l> :TestLast<CR>
    nmap <silent> t<C-g> :TestVisit<CR>
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'rayburgemeestre/phpfolding.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
    let g:asyncrun_open = 8
'''

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'vimwiki/vimwiki'
hook_add = '''
let g:vimwiki_ext2syntax = {}
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = '<Leader><Leader>'

[[plugins]]
repo = 'vim-scripts/Efficient-python-folding'

[[plugins]]
repo = 'vim-scripts/argtextobj.vim'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-cucumber'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <unique><silent> <Leader>G :<C-U>G<cr>
'''

[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-projectionist'
hook_add = '''
    let g:projectionist_heuristics = {
    \   'tests/&phpunit.xml|phpunit.xml.dist': {
    \     'src/*.php': {
    \       'alternate': 'tests/{}Test.php',
    \       'type': 'source'
    \     },
    \     'tests/*Test.php': {
    \       'alternate': 'src/{}.php',
    \       'type': 'test'
    \     }
    \   }
    \ }
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-scriptease'

[[plugins]]
repo = 'tpope/vim-sensible'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'     : [
    \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
    \ 't' : 'ctype',
    \ 'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : 'gotags',
  \ 'ctagsargs' : '-sort -silent'
\ }

'''

[[plugins]]
repo = 'garbas/vim-snipmate'
hook_add = '''
let g:snipMate = { 'snippet_version' : 1 }
'''

[[plugins]]
repo = 'MarcWeber/vim-addon-mw-utils'

[[plugins]]
repo = 'tomtom/tlib_vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'mhinz/vim-signify'
on_if = 'has("nvim") || has("patch-8.0.902")'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_virtualtext_cursor = 1
    let g:ale_php_phpcs_standard = 'PSR2'
    let g:ale_python_pylint_options = "--init-hook='import sys; sys.path.append(\".\")'"
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_post_update = ':UpdateRemotePlugins'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
call deoplete#custom#option({
    \ 'smart_case': v:true,
    \})

call deoplete#custom#source('LanguageClient',
    \ 'min_pattern_length',
    \ 2)
call deoplete#custom#source('_',
    \ 'disabled_syntaxes', ['String']
    \ )

autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

call deoplete#custom#option('sources', {
    \ '_': ['ale'],
    \ 'vim': ['vim'],
    \ 'zsh': ['zsh']
    \})

call deoplete#custom#option('ignore_sources', {'_': ['buffer', 'around']})
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'rhysd/git-messenger.vim'
lazy = 1
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'

[[plugins]]
repo = 'rhysd/vim-fixjson'
on_ft = 'json'

[[plugins]]
repo = 'rhysd/vim-grammarous'
hook_add = '''
let g:grammarous#default_comments_only_filetypes = {
    \ '*' : 1, 'help' : 0, 'markdown' : 0,
    \ }
'''
hook_post_source = '''
let g:grammarous#hooks = {}
function! g:grammarous#hooks.on_check(errs) abort
    nmap <buffer><C-n> <Plug>(grammarous-move-to-next-error)
    nmap <buffer><C-p> <Plug>(grammarous-move-to-previous-error)
endfunction

function! g:grammarous#hooks.on_reset(errs) abort
    nunmap <buffer><C-n>
    nunmap <buffer><C-p>
endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {n = '<Plug>'}
hook_add = '''
nmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'

[[plugins]]
repo = 'shumphrey/fugitive-gitlab.vim'

[[plugins]]
repo = 'sodapopcan/vim-twiggy'

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
let g:sneak#map_netrw = 0
'''

[[plugins]]
repo = 'tpope/vim-rsi'

[[plugins]]
repo = 'chrisbra/sudoedit.vim'

[[plugins]]
repo = 'dhulihan/vim-rfc'

[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = '''
let g:localvimrc_whitelist=$HOME . '/\.lvimrc'
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim-0.5.0")'

[[plugins]]
repo = 'deoplete-plugins/deoplete-lsp'
if = 'has("nvim-0.5.0")'

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_cmd = 'MarkdownPreview'
build = 'sh -c "cd app && yarn install"'

[[plugins]]
repo = 'nvim-lua/popup.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
if = 'has("nvim-0.5.0")'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = ':TSUpdate'
if = 'has("nvim-0.5.0")'

[[plugins]]
repo = 'nvim-treesitter/playground'
depends = ['nvim-treesitter/nvim-treesitter']

[[plugins]]
repo = 'bfredl/nvim-luadev'
on_cmd = 'Luadev'

[[plugins]]
repo = 'AndrewRadev/tagalong.vim'

[[plugins]]
repo = 'glepnir/lspsaga.nvim'

[[plugins]]
repo = 'thosakwe/vim-flutter'

[[plugins]]
repo = 'jvanja/vim-bootstrap4-snippets'

[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'github/copilot.vim'

[[plugins]]
repo = 'dart-lang/dart-vim-plugin'
on_ft = ['dart']
hook_add = '''
let g:dart_format_on_save = 1
let g:dartfmt_options = ['-l 100']
let g:dart_style_guide = 2
'''

[[plugins]]
repo = 'radenling/vim-dispatch-neovim'

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'MunifTanjim/nui.nvim'
if = 'has("nvim-0.5.0")'

[[plugins]]
repo = 'rcarriga/nvim-notify'
if = 'has("nvim-0.5.0")'

[[plugins]]
repo = 'folke/noice.nvim'
depends = ['MunifTanjim/nui.nvim']
hook_add = '''
lua << EOF
require("noice").setup({
  lsp = {
    override = {
      ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
      ["vim.lsp.util.stylize_markdown"] = true,
      ["cmp.entry.get_documentation"] = true,
    },
  },
  presets = {
    bottom_search = true, -- use a classic bottom cmdline for search
    command_palette = true, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
    inc_rename = false, -- enables an input dialog for inc-rename.nvim
    lsp_doc_border = false, -- add a border to hover docs and signature help
  },
})
EOF
'''

[[plugins]]
repo = 'yasuhiroki/github-actions-yaml.vim'
