[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> t
        \ denite#do_map('do_action', 'tabopen')
        nnoremap <silent><buffer><expr> v
        \ denite#do_map('do_action', 'vsplit')
        nnoremap <silent><buffer><expr> s
        \ denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
    endfunction

    autocmd FileType denite-filter call s:denite_filter_my_settings()
    function! s:denite_filter_my_settings() abort
        imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
    endfunction

    call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    if exists('*nvim_open_win')
        nnoremap <silent> <Leader>o :<C-U>Denite -split=floating -start-filter source<CR>
        nnoremap <silent> <Leader>of :<C-U>Denite -split=floating -start-filter file/rec<CR>
        nnoremap <silent> <Leader>ob :<C-U>Denite -split=floating -start-filter buffer<CR>
    else
        nnoremap <silent> <Leader>o :<C-U>Denite -start-filter source<CR>
        nnoremap <silent> <Leader>of :<C-U>Denite -start-filter file/rec<CR>
        nnoremap <silent> <Leader>ob :<C-U>Denite -start-filter buffer<CR>
    endif

'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:vim_markdown_strikethrough = 1
'''

[[plugins]]
repo = '2072/PHP-Indenting-for-VIm'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let NERDTreeIgnore=['\~$', '\.lo$', '\.la$', '\.pyc']
    let NERDTreeMinimalUI=1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'Yggdroot/LeaderF'
build =  './install.sh'
hook_add = '''
    nnoremap <silent><unique> <Leader>Ft :<C-U>LeaderfBufTagAll<CR>
    nnoremap <silent><unique> <Leader>Ff :<C-U>Leaderf file --no-ignore<CR>
    nnoremap <silent><unique> <Leader>Fn :<C-U>LeaderfFunction<CR>
    nnoremap <silent><unique> <Leader>Fb :<C-U>LeaderfBufferAll<CR>
    nnoremap <silent><unique> <Leader>Fh :<C-U>LeaderfHelp<CR>
    if executable('universal-ctags')
        let g:Lf_Ctags = 'universal-ctags'
    endif
    let g:Lf_PreviewInPopup = 1
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'alvan/vim-php-manual'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'jeffkreeftmeijer/vim-numbertoggle'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = 'executable("ctags") || executable("universal-ctags")'
hook_add = '''
    if executable('universal-ctags')
        let g:gutentags_ctags_executable = 'universal-ctags'
    endif
    set tags=./.tags;,.tags
    let g:gutentags_ctags_tagfile='.ctags'
    let s:vim_tags = expand('~/.cache/tags')
    let g:gutentags_cache_dir = s:vim_tags
    set statusline+=%{gutentags#statusline()}
'''

[[plugins]]
repo = 'vim-vdebug/vdebug'
hook_add = '''
    let g:vdebug_options = {
    \ 'port': 9003,
    \ 'ide_key': 'gasolwu',
    \ 'proxy_host': '',
    \ 'proxy_port': 0,
    \ }
'''

[[plugins]]
repo = 'haginaga/vim-compiler-phpunit'

[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
    nmap <silent> t<C-n> :TestNearest<CR>
    nmap <silent> t<C-f> :TestFile<CR>
    nmap <silent> t<C-s> :TestSuite<CR>
    nmap <silent> t<C-l> :TestLast<CR>
    nmap <silent> t<C-g> :TestVisit<CR>
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'rayburgemeestre/phpfolding.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
    let g:asyncrun_open = 8
'''

[[plugins]]
repo = 'lvht/phpcd.vim'

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'vimwiki/vimwiki'
hook_add = '''
let g:vimwiki_ext2syntax = {}
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'vim-scripts/Efficient-python-folding'

[[plugins]]
repo = 'vim-scripts/argtextobj.vim'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-cucumber'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-projectionist'
hook_add = '''
    let g:projectionist_heuristics = {
    \   'tests/&phpunit.xml|phpunit.xml.dist': {
    \     'src/*.php': {
    \       'alternate': 'tests/{}Test.php',
    \       'type': 'source'
    \     },
    \     'tests/*Test.php': {
    \       'alternate': 'src/{}.php',
    \       'type': 'test'
    \     }
    \   }
    \ }
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-scriptease'

[[plugins]]
repo = 'tpope/vim-sensible'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'     : [
    \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
    \ 't' : 'ctype',
    \ 'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : 'gotags',
  \ 'ctagsargs' : '-sort -silent'
\ }

'''

[[plugins]]
repo = 'garbas/vim-snipmate'
hook_add = '''
let g:snipMate = { 'snippet_version' : 1 }
'''

[[plugins]]
repo = 'MarcWeber/vim-addon-mw-utils'

[[plugins]]
repo = 'tomtom/tlib_vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_virtualtext_cursor = 1
    let g:ale_php_phpcs_standard = 'PSR2'
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_post_update = ':UpdateRemotePlugins'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
call deoplete#custom#option({
    \ 'smart_case': v:true,
    \})

call deoplete#custom#source('LanguageClient',
    \ 'min_pattern_length',
    \ 2)
call deoplete#custom#source('_',
    \ 'disabled_syntaxes', ['String']
    \ )

autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

call deoplete#custom#option('sources', {
    \ '_': ['ale'],
    \ 'vim': ['vim'],
    \ 'zsh': ['zsh']
    \})

call deoplete#custom#option('ignore_sources', {'_': ['buffer', 'around']})
'''

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'rhysd/git-messenger.vim'
lazy = 1
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'

[[plugins]]
repo = 'shumphrey/fugitive-gitlab.vim'

[[plugins]]
repo = 'sodapopcan/vim-twiggy'

[[plugins]]
repo = 'justinmk/vim-sneak'

[[plugins]]
repo = 'tpope/vim-rsi'

[[plugins]]
repo = 'chrisbra/sudoedit.vim'

[[plugins]]
repo = 'dhulihan/vim-rfc'

[[plugins]]
repo = 'embear/vim-localvimrc'
hook_add = '''
let g:localvimrc_whitelist=$HOME . '/\.lvimrc'
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'

[[plugins]]
repo = 'deoplete-plugins/deoplete-lsp'
