[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = '2072/PHP-Indenting-for-VIm'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    let NERDTreeIgnore=['\~$', '\.lo$', '\.la$', '\.pyc']
    let NERDTreeMinimalUI=1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'Yggdroot/LeaderF'
build =  './install.sh'
hook_add = '''
    nnoremap <silent><unique> <Leader>Ft :<C-U>LeaderfBufTagAll<CR>
    nnoremap <silent><unique> <Leader>Ff :<C-U>Leaderf file --no-ignore<CR>
    nnoremap <silent><unique> <Leader>Fn :<C-U>LeaderfFunction<CR>
    nnoremap <silent><unique> <Leader>Fb :<C-U>LeaderfBufferAll<CR>
    nnoremap <silent><unique> <Leader>Fh :<C-U>LeaderfHelp<CR>
    if executable('universal-ctags')
        let g:Lf_Ctags = 'universal-ctags'
    endif
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'alvan/vim-php-manual'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'jeffkreeftmeijer/vim-numbertoggle'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'
if = 'executable("ctags") || executable("universal-ctags")'
hook_add = '''
    if executable('universal-ctags')
        let g:gutentags_ctags_executable = 'universal-ctags'
    endif
    set tags=./.tags;,.tags
    let g:gutentags_ctags_tagfile='.ctags'
    let s:vim_tags = expand('~/.cache/tags')
    let g:gutentags_cache_dir = s:vim_tags
    set statusline+=%{gutentags#statusline()}
'''

[[plugins]]
repo = 'joonty/vdebug'
hook_add = '''
    let g:vdebug_options = {
    \ 'port': 9003,
    \ 'ide_key': 'gasolwu',
    \ 'proxy_host': '',
    \ 'proxy_port': 0,
    \ }
'''

[[plugins]]
repo = 'haginaga/vim-compiler-phpunit'

[[plugins]]
repo = 'janko-m/vim-test'
hook_add = '''
    nmap <silent> t<C-n> :TestNearest<CR>
    nmap <silent> t<C-f> :TestFile<CR>
    nmap <silent> t<C-s> :TestSuite<CR>
    nmap <silent> t<C-l> :TestLast<CR>
    nmap <silent> t<C-g> :TestVisit<CR>
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'

[[plugins]]
repo = 'rayburgemeestre/phpfolding.vim'

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
    let g:asyncrun_open = 8
'''

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'

[[plugins]]
repo = 'vim-scripts/wombat256.vim'

[[plugins]]
repo = 'vimwiki/vimwiki'

[[plugins]]
repo = 'vim-scripts/EasyMotion'

[[plugins]]
repo = 'vim-scripts/Efficient-python-folding'

[[plugins]]
repo = 'vim-scripts/argtextobj.vim'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-cucumber'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-git'

[[plugins]]
repo = 'tpope/vim-projectionist'
hook_add = '''
    let g:projectionist_heuristics = {
    \   'tests/&phpunit.xml|phpunit.xml.dist': {
    \     'src/*.php': {
    \       'alternate': 'tests/{}Test.php',
    \       'type': 'source'
    \     },
    \     'tests/*Test.php': {
    \       'alternate': 'src/{}.php',
    \       'type': 'test'
    \     }
    \   }
    \ }
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'tpope/vim-scriptease'

[[plugins]]
repo = 'tpope/vim-sensible'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'garbas/vim-snipmate'

[[plugins]]
repo = 'MarcWeber/vim-addon-mw-utils'

[[plugins]]
repo = 'tomtom/tlib_vim'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_virtualtext_cursor = 1
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install --frozen-lockfile'
if = 'executable("node")'
hook_add = '''
    autocmd FileType php nmap <silent> <Leader>gi <Plug>(coc-implementation)
    autocmd FileType php nmap <silent> <leader>gd <Plug>(coc-definition)
    autocmd FileType php nmap <silent> <leader>gt <Plug>(coc-type-definition)
    autocmd FileType php nmap <silent> <Leader>gr <Plug>(coc-references)
    autocmd FileType php nmap <silent> ]d <Plug>(coc-diagnostic-next)
    autocmd FileType php nmap <silent> [d <Plug>(coc-diagnostic-prev)
    autocmd FileType php setl formatexpr=CocAction('formatSelected')

    command! -nargs=0 CocFormat :call CocAction('format')
    command! -nargs=0 CocRename :call CocAction('rename')

    let g:coc_global_extensions = ['coc-phpls', 'coc-json', 'coc-snippets', 'coc-tsserver', 'coc-tslint', 'coc-eslint']

    function! CocCurrentFunction()
        return get(b:, 'coc_current_function', '')
    endfunction

    let g:lightline = {
    \  'colorscheme': 'wombat',
    \  'active': {
    \    'left': [ [ 'mode', 'paste' ],
    \              [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
    \  },
    \  'component_function': {
    \    'cocstatus': 'coc#status',
    \    'currentfunction': 'CocCurrentFunction'
    \  }
    \}


'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_post_update = ':UpdateRemotePlugins'

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'rhysd/git-messenger.vim'
lazy = 1
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'

[[plugins]]
repo = 'machakann/vim-highlightedyank'

[[plugins]]
repo = 'rafi/awesome-vim-colorschemes'
